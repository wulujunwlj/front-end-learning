
1、直接运行 .py 文件。（Windows不行，Mac和Linux可以）方法是：
	在 .py 文件的第一行加上：#!/usr/bin/env python
	命令：chmod a+x hello.py

2、print 语句会一次打印每个字符串，遇到逗号会输出一个空格。

3、输入与输出 input/output
	raw_input()/print;	raw_input() 可以显示一个字符串

4、sublime text3 中运行 python 文件的方法：
	Tools --> Build System --> New Build System:

	{
		"cmd": ["python", "-u", "$file"],
		"path":"D:\\ProgramFiles\\Python27",
		"file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)",
		"selector": "source.python"
	}

	save --> name:python27.sublime-build
	Tools --> Build System --> python27

	打开源文件，然后 Ctrl + B 运行

5、整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的。而浮点数运算则可能有四舍五入的误差。

6、字符串：'' 或 ""；转义符：\；r''表示''内部的字符默认不转义；''' 或 """ 可表示多行内容。

7、变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须制定变量类型，如果赋值的时候类型不匹配，就会报错。

8、Python 支持多种数据类型，在计算机内部，可以把任何数据都看成一个对象，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量关联起来。

9、编码：
	ASCII 编码是一个字节，而Unicode编码通常是2个字节，如果要用到非常偏僻的字符，就需要4个字节。
	UTF-8编码：把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。[UTF-8主要用于把Unicode编码转化成可变长编码，节约空间]

	计算机系统通用的字符编码工作方式：[内存中是Unicode编码]
		在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码;
		用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件；
		浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器。

10、Python 中字符串转换方法：
	ord():字母转换成ASCII码
	chr()：ASCII码转换成字母
	u'...':表示用Unicode表示的字符串
	u'...' 转换为UTF-8：u'...'.encode('utf-8')

11、格式化输出：
	'Hi %s, your score is %d.' % ('Bart', 59)

12、list 和 tuple[元组，不可变]
	classmates = ['Micheal', 'Bob', 'Tracy']
	len(classmates)
	classmates.append(elem)
	classmates.insert(index, elem)
	classmates.pop([index])

	tuple 所谓的不变是说，tuple 的每个元素，指向永远不变。

	t = ('a', 'b', ['A', 'B'])
	t[2][0] = 'X'
	t[2][1] = 'Y'

13、对非零数值、非空字符串、非空list等，则判断为 True，否则为 False

14、使用 raw_input() 读取的内容永远以字符串的形式返回，可以通过 int() 转换成整形。

15、dict 和 set
	dict[map:key-value]: d = {'Micheal': 95, 'Bob': 72, 'Tracy': 68}
	set:s = set([1, 2, 3, 2, 3, 9])

	dict 采用key-value的存储方式，因此查找速度很快。
	判断 key 是否存在：'...' in d/ d.get('...')
	删除 key：pop(key)

	dict 与 list 的比较：
		dict的特点：
			1、查找和插入的速度极快，不会随着key的增加而增加；
			2、需要占用大量的内存，内存浪费多
		list的特点：
			1、查找和插入的事件随着元素的增加而增加；
			2、占用空间小，浪费内存很少。

**important：
		dict 的 key必须是不可变对象。这是因为，dict根据key来计算value的存储位置，如果每次计算相同额key得出的结果不同，那dict内部就会完全混乱。这个通过key计算位置的算法成为哈希算法(hash)；	要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key。

	dict:
		重复元素自动被过滤；
		s.add('...')/s.remove('...')

	set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。

16、可变和不可变对象：
	对于可变对象进行操作，内容是会变化的；a = ['b', 'c', 'z', 'd']	a.sort()
	对于不可变对象操作，返回一个新的对象。

	对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。

17、函数
	定义函数时，需要确定函数名和参数个数；
	在函数体内，通过 return 返回结果，没有 return时，自动返回 return None；
	函数可以以tuple的方式同时返回多个值。

18、函数的参数：可选参数
	必选参数在前，默认参数灾后，否则python编译器会报错；
	变化小的参数可设置默认参数，以减小调用的难度；
	不按顺序提供部分默认参数时，需要把参数名写上;
	默认参数必须指向不变对象。

		def add_end(L = None):
			if L is None:
				L = []
				
			L.append('end');
			return L

19、函数的参数：可变参数
	传入的参数个数是可变的；

20、函数的参数：关键字参数

	
21、参数小结：
	参数顺序：必选参数、默认参数、可变参数和关键字参数。
	默认参数一定要用不可变对象，如果是可变对象，运行会有逻辑错误；
	定义参数：
		可变参数： *args，args接收的是一个tuple；
		关键字参数：**kw，kw接收的是一个dict；
	调用传参：
		可变参数可以直接传入：func(1, 2, 3)，又可以先组装成 list 或 tuple，再通过 *args 传入: func(*(1, 2, 3))；
		关键字参数既可以直接传入：func(a=1, b=2)，又可以先组装成 dict，再通过 **kw 传入：func(**{'a':1, 'b':2})。

22、递归函数：
	理论上，所有递归函数都可以写成循环的方式。
	在计算机中，函数调用时通过栈这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。当递归调用次数过多，会导致栈溢出。

	尾递归调用：
	在函数返回的时候，调用自身本身，并且，return 语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出。

	针对尾递归优化的语言可以通过尾递归防止栈溢出。尾递归事实上和循环是等价的，没有循环语句的编程语言只能通过尾递归实现循环。

	Python标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。

23、切片：

24、列表生成器：

25、生成器：
	Python 中，一边循环一边计算的机制，称为生成器(Generator)。
	创建 generator：g = (x * x for x in range(10))
	打印generator的单个元素：g.next()；
	也可以用 for...in 打印generator的所有元素；
	定义函数为generator：如果一个函数定义中包含 yield 关键字，那么这个函数就不再是一个函数，而是一个 generator

	执行流程：
		函数是顺序执行，遇到 return 语句或者最后一行函数语句就返回；而变成 generator 的函数，在每次调用 next() 的时候执行，遇到 yield 语句返回，再次执行时从上次返回的 yield 语句处继续执行。


26、函数式编程：
	面向过程的程序设计：通过一层一层的函数调用，把复杂任务分解成简单的任务。函数是面向过程的程序设计的基本单元。
	函数式编程[Functional Programming]：
		函数式编程是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入时确定的，输出就是确定的，这种纯函数称之为没有副作用。而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出，因此，这种函数是由副作用的。
		函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数。
		Python 对函数式编程提供部分支持。

27、高阶函数：
	Higher-order function:一个函数接收另一个函数作为参数，这种函数称之为高阶函数。
	把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。

28、map/reduce
	map(func, list):map 将传入的函数依次作用到序列的每个元素，并把结果作为新的list返回。
	reduce(func, list):reduce 把一个函数作用在一个序列上，这个函数接收两个参数，reduce把结果继续和序列的下一个元素做累积计算。类似效果：reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)

29、filter:
	filter() 函数用于过滤序列。filter 把传入的函数依次作用于每个元素，然后根据返回值是 True 还是 False 决定保留还是丢弃该元素。

30、sorted
	通常规定，对于两个元素x和y，如果认为x < y，则返回-1，如果认为x == y，则返回0，如果认为x > y，则返回1，这样，排序算法就不用关心具体的比较过程，而是根据比较结果直接排序。
	sort(list, func_cmp)

31、返回函数 --> closure
	def outer_func(*args):
		def inner_func():
			pass
		return inner_func

	闭包：返回闭包的函数不要饮用任何循环变量，或者后续会发生变化的变量。
	解决办法：再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变

32、匿名函数：
	map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9])
	关键字 lambda 表示匿名函数，冒号前面的x表示函数参数。
	匿名函数只能有一个表达式，不用写 return，返回值就是该表达式的结果。

33、装饰器[decorator]：
	在代码运行期间动态增加功能的方式，称之为装饰器。
	本质上，decorator 就是一个返回函数的高阶函数。

34、偏函数[Partial function]：
	functools.partial 的作用是，把一个函数的某些参数给固定住（设定默认值），返回一个新的函数，调用这个函数会更简单。

35、模块（module）：
	在 Python 中，一个 .py 文件就称之为一个模块。（module）
	包(package)：按目录来组织模块的方法。
	每一个包目录下面都会有一个__init__.py的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。__init__.py可以是空文件，也可以有Python代码，因为__init__.py本身就是一个模块，而它的模块名就是mycompany。
	任何模块代码的第一个字符串都被视为模块的文档注释；
	if __name__ == '__main__':
		test()
	当我们在命令行运行hello模块文件时，Python解释器把一个特殊变量__name__置为__main__，而如果在其他地方导入该hello模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。

36、作用域：[变量名约定]
	在 Python 中，不同类型的变量和函数通过 _ 前缀实现。
	不带前缀的函数和变量名[abc, x123]，public;
	模块自带的变量[__author__, __name__, __doc__];
	非公开变量[_abc, __abc]，不应该被直接引用。

37、安装第三方模块：
	在 Python中，安装第三方模块时通过setuptools。包括：easy_install 和 pip。
	python 第三方库注册网站[Python Package Index]: pypi.python.org/pypi
	

38、




http://hax.iteye.com/blog/1128269
http://zhuanlan.zhihu.com/FrontendMagazine/20058966
https://github.com/tastejs/todomvc

http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/0014186131194415d50558b7a1c424f9fb52b84dc9c965c000
http://www.codeceo.com/article/javascript-plugin.html
http://www.360doc.com/content/15/0314/11/9065871_455017557.shtml
http://blogread.cn/it/article/4871?f=wb
http://blogread.cn/it/article/4873?f=wb
http://www.codeceo.com/article/write-stable-readable-javascript.html
http://www.codeceo.com/article/javascript-strong-type.html
http://www.html5tricks.com/demo/jiaoben1041/index.html
